# This is a basic workflow to help you get started with Actions
name: CI
# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    #branches: [ master ]
    #branches: [ GitCI/CD ]
    branches: '**'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  
  android_build :
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    
    strategy:
      max-parallel: 0

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - uses: actions/setup-java@v1
        with:
          java-version: '12.x'

      - uses: subosito/flutter-action@v1
        with:
          flutter-version: '2.0.4'

      # Runs a single command using the runners shell
      - name: Build apk
        run: flutter build apk

  ios_build :

    runs-on : macos-latest

    steps:

      #- uses: actions/checkout@v2

      #- uses: actions/setup-java@v1
      #  with:
      #    java-version: '12.x'

      #- uses: subosito/flutter-action@v1
      #  with:
      #    flutter-version: '2.0.4'

      - name: Build IOS app
        run: echo We do not build IOS app yet beacause we do not have necessary certificates and hardware to create it and Apple Developper Account

  test:

    runs-on: ubuntu-latest

    steps:

      - uses: actions/setup-java@v1
        with:
          java-version: '12.x'

      - uses: subosito/flutter-action@v1
        with:
          flutter-version: '2.0.4'
          
      - name: Unit tests
        run: flutter test
        #TODO : ajouter une étape pour le lancement des tests des microservices (google functions)

#For master branch only, deploy google functions and publish the apk

  cloud_functions_deploy:

    #if: github.ref == 'refs/heads/master'

    runs-on: ubuntu-latest

    #needs: [android_build, ios_build, test]

    steps:

      - uses: actions/checkout@v2

      - name: Install npm packages
        run: |
          cd functions
          npm install

      - name: Deploy to Firebase
        uses: doonstore/firebase-deploy@v1
        with:
          params: --only functions
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      #- name: Deploy to Firebase
        #  uses: w9jds/firebase-action@master
          #with:
        #args: deploy --only functions
          #env:
          #FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        #PROJECT_ID: "default"

  #TODO: ajouter que le job de clouf_function doit âtre déployé avant que l'apk ne le soit, pour ne pas avoir apk pas en phase avec functions google

  deploy_apk:

    #if: github.ref == 'refs/heads/master'

    runs-on: ubuntu-latest

    #needs: [cloud_functions_deploy]
    needs: [android_build]

    steps:

      - uses: actions/checkout@v2

      - uses: subosito/flutter-action@v1
        with:
          flutter-version: '2.0.4'

      - name: Build apk
        run: flutter build apk

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: build/app/outputs/flutter-apk/app-release.apk
          tag: ${{ github.ref }}
          asset_name: "PrixBanque"
          overwrite: true
          body: "Uploading a new version of PrixBanque"


      # This create a release on the workflow only
#      - name: Build apk
      #        run: flutter build apk
      #
        #- name: Step 1 - Create a temporary artifact downloads folder
        #run: mkdir downloads

        # - name: Step 2 - Add artifacts to publish to the temp folder
        #run: cp build/app/outputs/flutter-apk/app-release.apk downloads/

        #- name: Step 3 - Use the Upload Artifact GitHub Action
        #uses: actions/upload-artifact@v2
          #with:
          #name: assets-for-download
          #path: downloads




